/**
 * @file main.cpp
 * @author Cosmin Tanislav
 * @author Cristian Fatu
 * @date 15 Nov 2019
 * @brief File containing the ZMOD DAC1411 linux demo.
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fstream>
#include <iostream>
#include <vector>

#include "zmod.h"
#include "zmoddac1411.h"

#define TRANSFER_LEN	0x400
#define IIC_BASE_ADDR   0xE0005000
#define ZMOD_IRQ 		61

#define DAC_BASE_ADDR 		0x43C10000
#define DAC_DMA_BASE_ADDR 	0x40410000
#define DAC_FLASH_ADDR   	0x31
#define DAC_DMA_IRQ 		63

/*
 * Simple DAC test, using arbitrary values populated in the buffer.
* @oaram signal_name - Name of Signal we want to generate (am, ofdm)
* @param channel - the channel where samples will be generated
* @param frequencyDivider - the output frequency divider
* @param gain - the gain for the channel
*/
void dacRampDemo(std::string signal_name, uint8_t channel, uint8_t frequencyDivider, uint8_t gain)
{
	ZMODDAC1411 dacZmod(DAC_BASE_ADDR, DAC_DMA_BASE_ADDR, IIC_BASE_ADDR, DAC_FLASH_ADDR, DAC_DMA_IRQ);

	std::vector<float> signal {0, 0, 0, 0, 0, 0, 0, 0, 0};
	if (signal_name == "AM"){
		signal = {
			3.00000, 2.42680, 0.92666, -0.92617, -2.42297, -2.99211, -2.41787, -0.92228, 0.92083, 2.40644, 2.96858, 2.39633, 0.91310, -0.91070, -2.37749, -2.92978, -2.36252, -0.89927, 0.89597, 2.33655, 2.87631, 2.31696, 0.88101, -0.87684, -2.28429, -2.80902, -2.26039, -0.85859, 0.85364, 2.22151, 2.72897, 2.19368, 0.83238, -0.82672, -2.14922, -2.63742, -2.11789, -0.80280, 0.79651, 2.06856, 2.53583, 2.03422, 0.77030, -0.76349, -1.98078, -2.42578, -1.94399, -0.73539, 0.72817, 1.88729, 2.30902, 1.84862, 0.69864, -0.69112, -1.78955, -2.18738, -1.74961, -0.66061, 0.65291, 1.68911, 2.06279, 1.64853, 0.62192, -0.61415, -1.58754, -1.93721, -1.54696, -0.58316, 0.57545, 1.48646, 1.81262, 1.44652, 0.54495, -0.53743, -1.38745, -1.69098, -1.34878, -0.50790, 0.50068, 1.29208, 1.57422, 1.25528, 0.47258, -0.46577, -1.20184, -1.46417, -1.16751, -0.43955, 0.43327, 1.11818, 1.36258, 1.08684, 0.40934, -0.40368, -1.04239, -1.27103, -1.01455, -0.38243, 0.37748, 0.97568, 1.19098, 0.95178, 0.35922, -0.35506, -0.91911, -1.12369, -0.89952, -0.34010, 0.33680, 0.87355, 1.07022, 0.85858, 0.32536, -0.32296, -0.83974, -1.03142, -0.82963, -0.31524, 0.31379, 0.81820, 1.00789, 0.81310, 0.30989, -0.30941, -0.80927, -1.00000, -0.80927, -0.30941, 0.30989, 0.81310, 1.00789, 0.81820, 0.31379, -0.31524, -0.82963, -1.03142, -0.83974, -0.32296, 0.32536, 0.85858, 1.07022, 0.87355, 0.33680, -0.34010, -0.89952, -1.12369, -0.91911, -0.35506, 0.35922, 0.95178, 1.19098, 0.97568, 0.37748, -0.38243, -1.01455, -1.27103, -1.04239, -0.40368, 0.40934, 1.08684, 1.36258, 1.11818, 0.43327, -0.43955, -1.16751, -1.46417, -1.20184, -0.46577, 0.47258, 1.25528, 1.57422, 1.29208, 0.50068, -0.50790, -1.34878, -1.69098, -1.38745, -0.53743, 0.54495, 1.44652, 1.81262, 1.48646, 0.57545, -0.58316, -1.54696, -1.93721, -1.58754, -0.61415, 0.62192, 1.64853, 2.06279, 1.68911, 0.65291, -0.66061, -1.74961, -2.18738, -1.78955, -0.69112, 0.69864, 1.84862, 2.30902, 1.88729, 0.72817, -0.73539, -1.94399, -2.42578, -1.98078, -0.76349, 0.77030, 2.03422, 2.53583, 2.06856, 0.79651, -0.80280, -2.11789, -2.63742, -2.14922, -0.82672, 0.83238, 2.19368, 2.72897, 2.22151, 0.85364, -0.85859, -2.26039, -2.80902, -2.28429, -0.87684, 0.88101, 2.31696, 2.87631, 2.33655, 0.89597, -0.89927, -2.36252, -2.92978, -2.37749, -0.91070, 0.91310, 2.39633, 2.96858, 2.40644, 0.92083, -0.92228, -2.41787, -2.99211, -2.42297, -0.92617, 0.92666, 2.42680
   	 	};
		std::cout << "AM" << std::endl;
	}
	else if (signal_name == "FM"){
		signal = {
			-1.91532, -1.21910, -0.08464, 1.06362, 1.82856, 1.97255, 1.47858, 0.53171, -0.56016, -1.47173, -1.95580, -1.90295, -1.35490, -0.47585, 0.50305, 1.34748, 1.87464, 1.98783, 1.68652, 1.05440, 0.23200, -0.61759, -1.34174, -1.82408, -1.99967, -1.85888, -1.44166, -0.82488, -0.10621, 0.61234, 1.23871, 1.70140, 1.95553, 1.98467, 1.79891, 1.43023, 0.92622, 0.34321, -0.26035, -0.82958, -1.31764, -1.68872, -1.91960, -1.99993, -1.93142, -1.72634, -1.40536, -0.99529, -0.52659, -0.03119, 0.45962, 0.91688, 1.31533, 1.63442, 1.85896, 1.97945, 1.99210, 1.89867, 1.70603, 1.42562, 1.07277, 0.66591, 0.22572, -0.22572, -0.66591, -1.07277, -1.42562, -1.70603, -1.89867, -1.99210, -1.97945, -1.85896, -1.63442, -1.31533, -0.91688, -0.45962, 0.03119, 0.52659, 0.99529, 1.40536, 1.72634, 1.93142, 1.99993, 1.91960, 1.68872, 1.31764, 0.82958, 0.26035, -0.34321, -0.92622, -1.43023, -1.79891, -1.98467, -1.95553, -1.70140, -1.23871, -0.61234, 0.10621, 0.82488, 1.44166, 1.85888, 1.99967, 1.82408, 1.34174, 0.61759, -0.23200, -1.05440, -1.68652, -1.98783, -1.87464, -1.34748, -0.50305, 0.47585, 1.35490, 1.90295, 1.95580, 1.47173, 0.56016, -0.53171, -1.47858, -1.97255, -1.82856, -1.06362, 0.08464, 1.21910, 1.91532, 1.88462, 1.10604, -0.13506, -1.33556, -1.97255, -1.73777, -0.70310, 0.67534, 1.74276, 1.95580, 1.17337, -0.23142, -1.52679, -1.99641, -1.34748, 0.08353, 1.47871, 1.99630, 1.29048, -0.23200, -1.61831, -1.95726, -0.99362, 0.65249, 1.85888, 1.76387, 0.40358, -1.25984, -1.99999, -1.23871, 0.47409, 1.82859, 1.75092, 0.27536, -1.43023, -1.97206, -0.88047, 0.95494, 1.98712, 1.31764, -0.49726, -1.88295, -1.60791, 0.10302, 1.72634, 1.78764, 0.21447, -1.56011, -1.89224, -0.45962, 1.40713, 1.94969, 0.64474, -1.27609, -1.97945, -0.78451, 1.16661, 1.99372, 0.89352, -1.07277, -1.99936, -0.98545, 0.98545, 1.99936, 1.07277, -0.89352, -1.99372, -1.16661, 0.78451, 1.97945, 1.27609, -0.64474, -1.94969, -1.40713, 0.45962, 1.89224, 1.56011, -0.21447, -1.78764, -1.72634, -0.10302, 1.60791, 1.88295, 0.49726, -1.31764, -1.98712, -0.95494, 0.88047, 1.97206, 1.43023, -0.27536, -1.75092, -1.82859, -0.47409, 1.23871, 1.99999, 1.25984, -0.40358, -1.76387, -1.85888, -0.65249, 0.99362, 1.95726, 1.61831, 0.23200, -1.29048, -1.99630, -1.47871, -0.08353, 1.34748, 1.99641, 1.52679, 0.23142, -1.17337, -1.95580, -1.74276, -0.67534, 0.70310, 1.73777, 1.97255, 1.33556, 0.13506, -1.10604, -1.88462
		};
		std::cout << "FM" << std::endl;
	}

    int len = signal.size();
	uint32_t *buf;
	uint32_t valBuf;
	int16_t valRaw;
	size_t length = len;
	int i;

	if (length > ((1<<14) - 1))
	{
		// limit the length to maximum buffer size (1<<14 - 1)
		length = ((1<<14) - 1);
	}

	buf = dacZmod.allocChannelsBuffer(length);
	dacZmod.setOutputSampleFrequencyDivider(frequencyDivider);
	dacZmod.setGain(channel, gain);

    i = 0;
    for(int idx = 0; idx < len; idx++){
        valRaw = dacZmod.getSignedRawFromVolt(signal[idx], gain);
		valBuf = dacZmod.arrangeChannelData(channel, valRaw);
		buf[i++] = valBuf;
    }

	// send data to DAC and start the instrument
	dacZmod.setData(buf, length);
	dacZmod.start();
	dacZmod.freeChannelsBuffer(buf, length);
}

int main() {
	std::cout << "ZmodDAC1411 Demo\n";
	// signal_name				Name of Signal we want to generate (AM, FM, OFDM)
	// channel 					CH1
	// Output Frequency Divider	1
	// gain						HIGH - Corresponds to HIGH input Range
	dacRampDemo("AM", 0, 1, 1);
	return 0;
}
